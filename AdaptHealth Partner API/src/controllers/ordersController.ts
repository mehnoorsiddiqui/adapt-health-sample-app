/**
 * AdaptHealth Partner APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, FileWrapper, RequestOptions } from '../core';
import { ApiResponseError } from '../errors/apiResponseError';
import { ApiResponse1, apiResponse1Schema } from '../models/apiResponse1';
import { Order, orderSchema } from '../models/order';
import { string } from '../schema';
import { BaseController } from './baseController';

export class OrdersController extends BaseController {
  /**
   * Request the creation of a new order, submits the order record to AdaptHealth
   *
   * @param body
   * @return Response from the API call
   */
  async createAnOrder(
    body: Order,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ApiResponse1>> {
    const req = this.createRequest('POST', '/orders');
    const mapped = req.prepareArgs({ body: [body, orderSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ApiResponseError, 'TODO: Add error message');
    return req.callAsJson(apiResponse1Schema, requestOptions);
  }

  /**
   * Request cancellation of an order
   *
   * @param id
   * @return Response from the API call
   */
  async cancelAnOrder(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ApiResponse1>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/orders/${mapped.id}`;
    req.throwOn(500, ApiResponseError, 'TODO: Add error message');
    return req.callAsJson(apiResponse1Schema, requestOptions);
  }

  /**
   * Retrieve order status by ID
   *
   * @param id
   * @return Response from the API call
   */
  async getOrderStatusByID(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ApiResponse1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/orders/${mapped.id}`;
    req.throwOn(500, ApiResponseError, 'TODO: Add error message');
    return req.callAsJson(apiResponse1Schema, requestOptions);
  }

  /**
   * Upload a document on the given order
   *
   * @param id
   * @param file The file to be uploaded
   * @return Response from the API call
   */
  async uploadADocument(
    id: string,
    file: FileWrapper,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ApiResponse1>> {
    const req = this.createRequest('POST');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.formData({
      file: file,
    });
    req.appendTemplatePath`/orders/${mapped.id}/documents`;
    req.throwOn(500, ApiResponseError, 'TODO: Add error message');
    return req.callAsJson(apiResponse1Schema, requestOptions);
  }
}
