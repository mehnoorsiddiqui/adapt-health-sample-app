/**
 * AdaptHealth Partner APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ApiResponseError } from '../errors/apiResponseError';
import { ApiResponse1, apiResponse1Schema } from '../models/apiResponse1';
import {
  ApiSearchResponse,
  apiSearchResponseSchema,
} from '../models/apiSearchResponse';
import { Patient, patientSchema } from '../models/patient';
import { number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class PatientsController extends BaseController {
  /**
   * Search for vendor-posted patients
   *
   * @param pageNumber Current page number (used for paging results)
   * @param pageSize   Page size (used for paging results)
   * @param firstName  Patient's First Name
   * @param lastName   Patient's Last Name
   * @param birthDate  Patient's Birthdate
   * @return Response from the API call
   */
  async getPatients(
    pageNumber: number,
    pageSize: number,
    firstName?: string,
    lastName?: string,
    birthDate?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ApiSearchResponse>> {
    const req = this.createRequest('GET', '/patients');
    const mapped = req.prepareArgs({
      pageNumber: [pageNumber, number()],
      pageSize: [pageSize, number()],
      firstName: [firstName, optional(string())],
      lastName: [lastName, optional(string())],
      birthDate: [birthDate, optional(string())],
    });
    req.query('pageNumber', mapped.pageNumber);
    req.query('pageSize', mapped.pageSize);
    req.query('firstName', mapped.firstName);
    req.query('lastName', mapped.lastName);
    req.query('birthDate', mapped.birthDate);
    req.throwOn(500, ApiResponseError, 'TODO: Add error message');
    return req.callAsJson(apiSearchResponseSchema, requestOptions);
  }

  /**
   * Request the creation of a new patient, submits the patient record to AdaptHealth
   *
   * @param body
   * @return Response from the API call
   */
  async createAPatient(
    body: Patient,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ApiResponse1>> {
    const req = this.createRequest('POST', '/patients');
    const mapped = req.prepareArgs({ body: [body, patientSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(500, ApiResponseError, 'TODO: Add error message');
    return req.callAsJson(apiResponse1Schema, requestOptions);
  }

  /**
   * Retrieve specific patient information by ID
   *
   * @param id
   * @return Response from the API call
   */
  async getPatientByID(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ApiResponse1>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/patients/${mapped.id}`;
    req.throwOn(500, ApiResponseError, 'TODO: Add error message');
    return req.callAsJson(apiResponse1Schema, requestOptions);
  }

  /**
   * Retrieve all orders for a given patient
   *
   * @param id
   * @param pageNumber Current page number (used for paging results)
   * @param pageSize   Page size (used for paging results)
   * @return Response from the API call
   */
  async getPatientOrders(
    id: string,
    pageNumber: number,
    pageSize: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ApiSearchResponse>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      id: [id, string()],
      pageNumber: [pageNumber, number()],
      pageSize: [pageSize, number()],
    });
    req.query('pageNumber', mapped.pageNumber);
    req.query('pageSize', mapped.pageSize);
    req.appendTemplatePath`/patients/${mapped.id}/orders`;
    req.throwOn(500, ApiResponseError, 'TODO: Add error message');
    return req.callAsJson(apiSearchResponseSchema, requestOptions);
  }
}
